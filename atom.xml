<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://szgyfe.github.io/atom.xml" rel="self"/>
  
  <link href="https://szgyfe.github.io/"/>
  <updated>2023-01-03T07:46:11.837Z</updated>
  <id>https://szgyfe.github.io/</id>
  
  <author>
    <name>szgy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://szgyfe.github.io/2023/01/03/hello-world/"/>
    <id>https://szgyfe.github.io/2023/01/03/hello-world/</id>
    <published>2023-01-03T07:46:11.837Z</published>
    <updated>2023-01-03T07:46:11.837Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HTML、CSS学习笔记面试题</title>
    <link href="https://szgyfe.github.io/2021/11/03/HTML%E3%80%81CSS%E4%B8%93%E9%A2%98/"/>
    <id>https://szgyfe.github.io/2021/11/03/HTML%E3%80%81CSS%E4%B8%93%E9%A2%98/</id>
    <published>2021-11-03T12:33:36.000Z</published>
    <updated>2023-01-05T03:12:10.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><a href='#1'>一、对BFC的了解</a></p><p><a href='#2'>二、css哪些属性可以继承</a></p><p><a href='#3'>三、水平垂直居中方式</a></p><p><a href='#4'>四、flex弹性盒子是什么</a></p><p><a href='#5'>五、 flex属性 0 1 auto</a></p><p><a href='#6'>六、px、em、rem、vw、%</a></p><p><a href='#7'>七、画一条 0.5px 的线或者说写一个字体大小小于12px的</a></p><p><a href='#8'>八、<code>DOMContentLoaded </code>事件和 Load 事件的区别？</a></p><p><a href='#9'>九、<code>localstorage</code>、<code>sessionstorage</code>、<code>cookie</code>的区别</a></p><p><a href='#10'>十、CSS预处理器</a></p><p><a href='#11'>一、阐述一下 CSS Sprites（雪碧图）</a></p><p><a href='#12'>十二、外边距塌陷</a></p><p><a href='#13'>十三、文本溢出</a></p><p><a href='#14'>十四、 移除inline-block间隙</a></p><p><a href='#15'>十五、伪类和伪元素</a></p><p><a href='#16'>十六、offsetHight、scrollHeight 、clientHight</a></p><p><a href='#17'>十七、清除浮动的几种方式及原理？</a></p><p><a href='#18'>十八、说说position定位</a></p><p><a href='#19'>十九、说说IE盒模型与标准盒模型</a></p><p><a href='#20'>二十、CSS优先级（权重的计算）</a></p><p><a href='#21'>二十一、实现一个两边固定中间自适应的布局</a></p><p><a  href='#22'>二十二、CSS 中 link 和@import 的区别？</a></p><p><a  href='#23'>二十三、分析比较 opacity: 0、visibility: hidden、display: none 优劣和适用场景</a></p><p><a  href='#24'>二十四、HTMLCollection 和NodeList的区别?</a></p><p><a  href='#25'>二十五、<code>localstorage</code>、<code>sessionstorage</code>、<code>cookie</code>的区别?</a></p><h2 id="一、对BFC的了解"><a href="#一、对BFC的了解" class="headerlink" title="一、对BFC的了解"></a><a name='1'>一、对BFC的了解</a></h2><h4 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h4><ul><li>即块格式化上下文，简单来说就是，<code>BFC</code>是一个完全独立的空间（布局环境），让空间里的子元素不会影响到外面的布局。那么怎么使用<code>BFC</code>呢，<code>BFC</code>可以看做是一个<code>CSS</code>元素属性</li></ul><h4 id="2、触发（创建条件）"><a href="#2、触发（创建条件）" class="headerlink" title="2、触发（创建条件）"></a>2、触发（创建条件）</h4><ul><li>根元素，也就是HTML标签</li><li>浮动</li><li>overflow的值不为 visible，为 auto、scroll、hidden</li><li>display的值为<code>inline-block</code>、<code>inltable-cell</code>、table-caption、table、<code>inline-table</code>、flex、<code>inline-flex</code>、grid、<code>inline-grid</code></li><li>position的值为absolute或fixed</li></ul><h4 id="3、应用场景"><a href="#3、应用场景" class="headerlink" title="3、应用场景"></a>3、应用场景</h4><ul><li><p>防止外边距重叠</p><ul><li>问题：当两个上下的盒子都设置了外边距margin时，就会出现外边距重叠的问题，他们两个之间的margin距离会以大的那个大的margin为准（而不是两个margin值相加）</li><li>解决方法：给其中一个盒子包在一个BFC盒子里面（给这个盒子设置<code>overflow:hidden</code>），这样他们属于两个BFC，会互不影响</li></ul></li><li><p>使用Float脱离文档流，高度塌陷的</p><ul><li><p>问题：内容浮动父盒子高度会消失</p></li><li><p>解决方法：给父盒子触发BFC，这样他们属于两个BFC，会互不影响</p></li></ul></li><li><p>两栏布局覆盖</p><ul><li>问题：两栏布局中，给前一个盒子设置浮动，后一个盒子不设置浮动，那么前一个盒子会因为脱离文档流覆盖在后一个盒子的上方</li><li>解决方法：可以把第二个盒子触发BFC</li></ul></li></ul><h2 id="二、css哪些属性可以继承"><a href="#二、css哪些属性可以继承" class="headerlink" title="二、css哪些属性可以继承"></a><a name='2'>二、css哪些属性可以继承</a></h2><pre><code class="css">（1）字体系列属性font、font-family、font-weight、font-size、font-style、font-variant、font-stretch、font-size-adjust（2）文本系列属性text-indent、text-align、text-shadow、line-height、word-spacing、letter-spacing、text-transform、direction、color（3）表格布局属性caption-side border-collapse empty-cells（4）列表属性list-style-type、list-style-image、list-style-position、list-style（5）光标属性cursor（6）元素可见性visibility</code></pre><pre><code class="css">答：每一个属性在定义中都给出了这个属性是否具有继承性，一个具有继承性的属性会在没有指定值的时候，会使用父元素的同属性的值来作为自己的值。一般具有继承性的属性有，字体相关的属性，font-size和font-weight等。文本相关的属性，color和text-align等。表格的一些布局属性、列表属性如list-style等。还有光标属性cursor、元素可见性visibility。当一个属性不是继承属性的时候，我们也可以通过将它的值设置为inherit来使它从父元素那获取同名的属性值来继承。</code></pre><h2 id="三、水平垂直居中方式"><a href="#三、水平垂直居中方式" class="headerlink" title="三、水平垂直居中方式"></a><a name='3'>三、水平垂直居中方式</a></h2><h4 id="1、水平垂直居中方式一"><a href="#1、水平垂直居中方式一" class="headerlink" title="1、水平垂直居中方式一"></a>1、水平垂直居中方式一</h4><ul><li><code>position</code>和<code>tansform</code>结合起来</li></ul><pre><code class="css">div &#123;  position: absolute;   width: 500px;  height: 300px;  top: 50%;  left: 50%;  transform: translate(-50%, -50%);  background-color: pink; &#125;</code></pre><h4 id="2、水平垂直居中方式二"><a href="#2、水平垂直居中方式二" class="headerlink" title="2、水平垂直居中方式二"></a>2、水平垂直居中方式二</h4><ul><li>弹性盒子<code>flex</code></li></ul><pre><code class="css">/*利用flex布局实际使用时应考虑兼容性*/.container &#123;  display: flex;  align-items: center; /*垂直居中*/  justify-content: center; /*水平居中*/&#125;.containerdiv &#123;  width: 100px;  height: 100px;  background-color: pink;&#125;</code></pre><h4 id="3、水平垂直居中方式三"><a href="#3、水平垂直居中方式三" class="headerlink" title="3、水平垂直居中方式三"></a>3、水平垂直居中方式三</h4><ul><li>定位<code>position</code>结合<code>calc</code></li></ul><pre><code class="css">.wp &#123;    position: relative;&#125;.box &#123;    position: absolute;;    top: calc(50% - 50px);    left: calc(50% - 50px);&#125;</code></pre><h4 id="4、水平垂直居中方式四"><a href="#4、水平垂直居中方式四" class="headerlink" title="4、水平垂直居中方式四"></a>4、水平垂直居中方式四</h4><ul><li><code>position</code>结合<code>margin：auto</code></li></ul><pre><code class="css">.son&#123;   position: absolute;   margin: auto;   top: 0;   left: 0;   right: 0;   bottom: 0; &#125;</code></pre><h2 id="四、flex弹性盒子是什么"><a href="#四、flex弹性盒子是什么" class="headerlink" title="四、flex弹性盒子是什么"></a><a name='4'>四、flex弹性盒子是什么</a></h2><pre><code>flex布局是CSS3新增的一种布局方式，我们可以通过将一个元素的display属性值设置为flex从而使它成为一个flex容器，它的所有子元素都会成为它的项目。一个容器默认有两条轴，一个是水平的主轴，一个是与主轴垂直的交叉轴。我们可以使用flex-direction来指定主轴的方向。我们可以使用justify-content来指定元素在主轴上的排列方式，使用align-items来指定元素在交叉轴上的排列方式。还可以使用flex-wrap来规定当一行排列不下时的换行方式。对于容器中的项目，我们可以使用order属性来指定项目的排列顺序，还可以使用flex-grow来指定当排列空间有剩余的时候，项目的放大比例。还可以使用flex-shrink来指定当排列空间不足时，项目的缩小比例。</code></pre><h2 id="五、-flex属性-0-1-auto-分别表示什么"><a href="#五、-flex属性-0-1-auto-分别表示什么" class="headerlink" title="五、 flex属性 0 1 auto 分别表示什么"></a><a name='5'>五、 flex属性 0 1 auto 分别表示什么</a></h2><ul><li>flex-grow 当还有剩余空间时，为有该属性子元素按比例分配剩余空间。默认：0.    <code>flex：1</code>也就相当于<code>flex-group：1</code></li><li>flex-shrink 当子元素的宽度超出父元素时，包含该属性的子元素按比例减去超出的宽度。默认：1.</li><li>flex-basic 指定元素的宽度，优先级高于width</li></ul><pre><code class="css">flex-grow: 0 项目在主轴上的放大比例，0表示不放大flex-shrink: 1 项目在主轴方向的收缩比例。1 表示超出空间全部收缩（不会超出容器了）flex-basis: auto 项目在主轴上的初始大小。auto是项目本身大小</code></pre><h2 id="六、px、em、rem、vw、"><a href="#六、px、em、rem、vw、" class="headerlink" title="六、px、em、rem、vw、%"></a><a name='6'>六、px、em、rem、vw、%</a></h2><ul><li><p>px：固定单位</p></li><li><p>%：% 是相对于父元素的大小设定的比率</p></li><li><p>em：相对单位，相对于父元素的字体大小，如果父元素为16px，1em就是16px</p></li><li><p>rem：相对单位，相对于根元素（HTML）的字体大小，根元素字体的大小也是动态获取当前视口宽度的十分之一</p></li><li><p>vw&#x2F;vh是一个动态值，相当于百分比值，1vw&#x2F;1vh相当于屏幕宽度&#x2F;高度的1%，</p></li></ul><h2 id="七、画一条-0-5px-的线或者说写一个字体大小小于12px的"><a href="#七、画一条-0-5px-的线或者说写一个字体大小小于12px的" class="headerlink" title="七、画一条 0.5px 的线或者说写一个字体大小小于12px的"></a><a name='7'>七、画一条 0.5px 的线或者说写一个字体大小小于12px的</a></h2><pre><code class="bash">采用transform:scale()的方式</code></pre><h2 id="八、DOMContentLoaded-事件和-Load-事件的区别？"><a href="#八、DOMContentLoaded-事件和-Load-事件的区别？" class="headerlink" title="八、DOMContentLoaded 事件和 Load 事件的区别？"></a><a name='8'>八、<code>DOMContentLoaded </code>事件和 Load 事件的区别？</a></h2><pre><code class="bash"> 当初始的 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，而无需等待样式表、图像和 子框架的加载完成。 Load 事件是当所有资源加载完成后触发的。</code></pre><h2 id="九、localstorage、sessionstorage、cookie的区别-浏览器"><a href="#九、localstorage、sessionstorage、cookie的区别-浏览器" class="headerlink" title="九、localstorage、sessionstorage、cookie的区别(浏览器)"></a><a name='9'>九、<code>localstorage</code>、<code>sessionstorage</code>、<code>cookie</code>的区别(浏览器)</a></h2><h4 id="1、存储大小不同"><a href="#1、存储大小不同" class="headerlink" title="1、存储大小不同"></a>1、存储大小不同</h4><ul><li><code>localstorage</code>和<code>sessionstorage</code>的最大存储空间为5M，cookie的最大存储空间为4k</li></ul><h4 id="2、生命周期不同"><a href="#2、生命周期不同" class="headerlink" title="2、生命周期不同"></a>2、生命周期不同</h4><ul><li><code>localstorage</code>存储的数据是永久性的，除非人为删除</li><li><code>cookie</code>存储的数据在有效时间之前一直有效，时间过了就无效了</li><li><code>sessionstorage</code>存储的数据在关闭页面会话（关闭标签页）之后就会被清除</li></ul><h4 id="3、数据共享不同"><a href="#3、数据共享不同" class="headerlink" title="3、数据共享不同"></a>3、数据共享不同</h4><ul><li><code>localstorage</code> 和<code>cookie</code>在所有同源窗口共享</li><li><code>sessionstorage </code>只能在当前会话标签共享</li></ul><h2 id="十、CSS预处理器"><a href="#十、CSS预处理器" class="headerlink" title="十、CSS预处理器"></a><a name='10'>十、CSS预处理器</a></h2><pre><code class="bash">预处理器例如：LESS、Sass、Stylus，用来预编译Sass或less csssprite，增强了css代码的复用性，还有层级、mixin、变量、循环、函数等，具有很方便的UI组件模块化开发能力，极大的提高工作效率。</code></pre><h2 id="十一、阐述一下-CSS-Sprites（雪碧图）"><a href="#十一、阐述一下-CSS-Sprites（雪碧图）" class="headerlink" title="十一、阐述一下 CSS Sprites（雪碧图）"></a><a name='11'>十一、阐述一下 CSS Sprites（雪碧图）</a></h2><pre><code class="bash">css sprites：精灵图(雪碧图)：把一堆小图片整合在一张大图上，通过css背景图片相关设置(背景图片、背景图是否重复、背景图定位)，显示图片，减轻服务器对图片的请求数量</code></pre><h2 id="十二、外边距塌陷"><a href="#十二、外边距塌陷" class="headerlink" title="十二、外边距塌陷"></a><a name='12'>十二、外边距塌陷</a></h2><h4 id="1、发生情况"><a href="#1、发生情况" class="headerlink" title="1、发生情况"></a>1、发生情况</h4><ul><li><p>同级下上相邻的div一个设置下面的设置margin-top，上面的盒子设置margin-botton 实际他们直接的距离只会取较大的那个值</p></li><li><p>嵌套的父子结构的div，如果父子都设置margin-top，那么两个盒子会一起移动，实际移动的距离也是较大的那个值</p></li></ul><h4 id="2、解决方法"><a href="#2、解决方法" class="headerlink" title="2、解决方法"></a>2、解决方法</h4><ul><li>行内块元素 inline-block 不会发生外边距折叠，包括同层级和嵌套元素。</li><li>浮动 float 元素不会发生外边距折叠，包括同层级和嵌套元素。</li><li>绝对定位元素 absolute 不会发生外边距折叠，包括同层级和嵌套元素。</li><li>创建了 BFC 的元素不会和它的子元素发生外边距折叠。</li><li>父子嵌套的情况也可以给父盒子设置border，或者padding</li></ul><h2 id="十三、文本溢出"><a href="#十三、文本溢出" class="headerlink" title="十三、文本溢出"></a><a name='13'>十三、文本溢出</a></h2><ul><li><strong>单行文本溢出</strong></li></ul><pre><code class="css">overflow: hidden;/* 既然是单行文本,就不能换行 */white-space: nowrap;/* 文本溢出的部分,用省略号来代替 */text-overflow: ellipsis;</code></pre><ul><li><strong>多行文本溢出</strong></li></ul><pre><code class="css">-webkit-line-clamp: 2;（用来限制在一个块元素显示的文本的行数，2 表示最多显示 2 行。为了实现该效果，它需要组合其他的 WebKit 属性）display: -webkit-box;（和 1 结合使用，将对象作为弹性伸缩盒子模型显示 ）-webkit-box-orient: vertical;（和 1 结合使用 ，设置或检索伸缩盒对象的子元素的排列方式 ）overflow: hidden;（文本溢出限定的宽度就隐藏内容）text-overflow: ellipsis;（多行文本的情况下，用省略号 “…” 隐藏溢出范围的文本)</code></pre><h2 id="十四、-移除inline-block间隙"><a href="#十四、-移除inline-block间隙" class="headerlink" title="十四、 移除inline-block间隙"></a><a name='14'>十四、 移除inline-block间隙</a></h2><ul><li><p><strong>问题</strong></p><ul><li>在CSS中，当我们将多个行内块元素并排时，会发现同行显示的inline-block元素之间会出现空隙。</li></ul></li><li><p><strong>出现问题原因</strong></p></li><li><p>当使用行内元素排版时，元素之间的符号都会被浏览器渲染，其中就包括换行符和空格，根据 white-space 的处理方式（默认时normal，合并多余空格）会将HTML中回车符换行符转换成空白符，在字体不为0的情况下，会占据空间，这也是我们所看到的 inline-block 元素之间的间隙。</p></li><li><p><strong>解决方法</strong></p></li><li><p>直接删除元素之间的换行符和空格</p><ul><li>父元素设置 font-size 为0，子元素设置正确的 font-size</li></ul></li></ul><h2 id="十五、伪类和伪元素"><a href="#十五、伪类和伪元素" class="headerlink" title="十五、伪类和伪元素"></a><a name='15'>十五、伪类和伪元素</a></h2><ul><li>伪类和伪元素用于修饰一些不在文档树中的信息</li><li>伪类用于文档树中已存在的元素处于某个状态时，给它添加样式，这个状态根据用户行为而定（如 :hover）</li><li>伪元素用于创建一些不在文档树中的元素并设置样式，可以通过这些元素给DOM元素的某些部分设置样式，但是实际这些伪<br>元素并没有真正存在文档树中，只是用户能看到这些元素而已(如 ::before）</li></ul><h2 id="十六、offsetHight、scrollHeight-、clientHight"><a href="#十六、offsetHight、scrollHeight-、clientHight" class="headerlink" title="十六、offsetHight、scrollHeight 、clientHight"></a><a name='16'>十六、offsetHight、scrollHeight 、clientHight</a></h2><ul><li><p><code>offsetHight：border +padding +content</code></p></li><li><p><code>clientHeight ：border +padding</code></p></li><li><p><code>scrollHeight：padding +实际内容高度</code>（如：当前这个盒子里有个比这个盒子大的盒子，就产生了滚动条，那么实际内容高度就为里面那个盒子的高度+padding）</p></li><li><p><strong>其他相关</strong> </p><ul><li><code>scrollTop</code>、<code>scrollLeft</code> ：<code>元素.scrollTop</code>：元素被卷去的头部，<code>元素.scrollLeft</code>: 元素被卷去的左侧距离</li></ul></li><li><p><code>widow.scrollTo（x，y</code>）:滚动到指定坐标</p></li></ul><pre><code class="javascript">  widow.scroll(&#123; //滚动到指定坐标      top：0//返回顶部      behavior：smooth//平滑滚动      &#125;)//接收一个对象</code></pre><ul><li><code>offsetTop</code>:获取元素到最近带有定位的父元素的距离，如果没有则相对于body（只读属性，不能设置）<ul><li><p>获取页面被卷去的高度</p><ul><li><code>doument.documentElement.scrollTop</code>：返回值是一个数字 ：卷去的数值</li></ul></li><li><p><code>widow.pageYoffset</code>(但是这个属性不能修改，只能获取)</p></li></ul></li></ul><h2 id="十七、清除浮动的几种方式及原理？"><a href="#十七、清除浮动的几种方式及原理？" class="headerlink" title="十七、清除浮动的几种方式及原理？"></a><a name='17'>十七、清除浮动的几种方式及原理？</a></h2><pre><code class="bash">答：清除浮动主要是为了解决父盒子里的子盒子浮动导致父盒子高度塌陷为0的问题方法：1、直接给父盒子添加高度2、添加一个空标签 并设置clear：both3、创建BFC：给父盒子设置overflow：hidden或者auto4、使用after伪元素清楚浮动5、使用before和after双伪元素清楚浮动</code></pre><p>清除浮动的方法：</p><h4 id="1、父级div定义-height"><a href="#1、父级div定义-height" class="headerlink" title="1、父级div定义 height"></a>1、父级div定义 height</h4><ul><li><p>原理：父级div有了固定的height，就解决了无法获取到高度的问题。</p></li><li><p>优点：简单、代码少。</p></li><li><p>缺点：只适合已知高度的布局</p></li></ul><h4 id="2、使用空标签清除浮动clear-both"><a href="#2、使用空标签清除浮动clear-both" class="headerlink" title="2、使用空标签清除浮动clear:both"></a>2、使用空标签清除浮动clear:both</h4><ul><li><p>原理：添加一个空div，利用css提高的clear:both清除浮动，让父级div能自动获取到高度</p></li><li><p>优点：简单、代码少、浏览器支持好</p></li><li><p>缺点：如果页面浮动布局多，就要增加很多空div（添加无意义标签，语义化差，所以不建议使用。）</p></li></ul><pre><code class="css">.clear &#123;        clear: both;&#125;</code></pre><h4 id="3、-创建BFC就可以包含住浮动的子元素"><a href="#3、-创建BFC就可以包含住浮动的子元素" class="headerlink" title="3、 创建BFC就可以包含住浮动的子元素"></a>3、 创建BFC就可以包含住浮动的子元素</h4><ul><li>使用<code>overflow</code>的方法（<code>hidden</code>和<code>auto</code>都可以实现）</li></ul><pre><code class="css">.father &#123;        overflow: hidden;&#125;</code></pre><h4 id="4、伪类元素-after清除浮动（推荐使用）"><a href="#4、伪类元素-after清除浮动（推荐使用）" class="headerlink" title="4、伪类元素::after清除浮动（推荐使用）"></a>4、伪类元素::after清除浮动（推荐使用）</h4><ul><li><p>添加一个不可见但占位置的块级元素，然后清除掉所有的浮动；</p></li><li><p>优点：符合闭合浮动思想，结构语义化正确</p></li><li><p>缺点：ie6-7不支持伪元素：after，使用zoom:1触发hasLayout。</p></li></ul><pre><code class="css">.clearfix::after &#123;       content: &quot;&quot;;        display: block;        height: 0;        visibility: hidden;        clear: both;&#125;/* ie6清除浮动的方式 *号只有IE6-IE7执行，其他浏览器不执行 */.clearfix &#123;    zoom: 1;&#125;</code></pre><h4 id="5、-双伪类元素-after和-before清除浮动（推荐使用）"><a href="#5、-双伪类元素-after和-before清除浮动（推荐使用）" class="headerlink" title="5、 双伪类元素:after和:before清除浮动（推荐使用）"></a>5、 双伪类元素:after和:before清除浮动（推荐使用）</h4><ul><li>原理与单伪元素清除浮动一样；</li></ul><pre><code class="css"> /* 使用：after和:before双伪元素清除浮动 */ .clearfix::after, .clearfix::before &#123;         content: &quot;&quot;;         display: table; &#125;.clearfix::after &#123;         clear: both; &#125; .clearfix &#123;         *zoom: 1; &#125;</code></pre><h2 id="十八、position定位"><a href="#十八、position定位" class="headerlink" title="十八、position定位"></a><a name='18'>十八、position定位</a></h2><ul><li>static ： 默认值，静态定位</li><li>relative ： 相对定位，即相对于元素的正常位置进行定位</li><li>absolute：绝对定位，相对于第一个非 static 定位的父级元素进行定位</li><li>fixed： 固定定位，相对于浏览器窗口进行定位</li><li>sticky： 粘性定位，它是 relative 和 fixed 的结合体，能够实现类似吸附的效果</li></ul><h2 id="十九、说说IE盒模型与标准盒模型"><a href="#十九、说说IE盒模型与标准盒模型" class="headerlink" title="十九、说说IE盒模型与标准盒模型"></a><a name='19'>十九、说说IE盒模型与标准盒模型</a></h2><p>有两种盒子模型：IE盒模型（border-box）、W3C标准盒模型（content-box）</p><p>盒模型又称框模型（Box Model）,包含了元素内容（content）、内边距（padding）、边框（border）、外边距（margin）四个部分。</p><ul><li>W3C<strong>标准盒模型</strong></li></ul><pre><code class="css">属性width，height只包含内容content，不包含border和padding也就是说我们设置的宽高对应的是盒子的content内容的宽高盒子实际的宽或高 = 我们设置的宽或高+padding+border</code></pre><ul><li>IE<strong>盒模型</strong></li></ul><pre><code class="css">属性width，height包含content、border和padding，指的是content+padding+border。也就是说我们设置的宽高就是盒子实际的宽高，我们设置的宽高包= content+padding+border= 盒子实际的宽高我们可以用box-sizing属性（css3属性）将默认的值content-box改为border-box;也就是将标准盒模型转化为IE盒模型</code></pre><h2 id="二十、CSS优先级（权重的计算）"><a href="#二十、CSS优先级（权重的计算）" class="headerlink" title="二十、CSS优先级（权重的计算）"></a><a name='20'>二十、CSS优先级（权重的计算）</a></h2><pre><code class="bash">!important 的权重最高内联样式，如: style=&quot;...&quot;，权值为1000。id选择器，如: #content，权值为0100。类，伪类、属性选择器，如.content，权值为0010。标签选择器、伪元素选择器，如div ， 权值为0001。通配符、子选择器、相邻选择器等。如*，&gt;， +，权值为0000.继承的样式没有权重 为最低⚠注意：计算不能进位</code></pre><h2 id="二十一、实现一个两边固定中间自适应的布局"><a href="#二十一、实现一个两边固定中间自适应的布局" class="headerlink" title="二十一、实现一个两边固定中间自适应的布局"></a><a name='21'>二十一、实现一个两边固定中间自适应的布局</a></h2><h4 id="1、利用定位实现两侧固定中间自适应"><a href="#1、利用定位实现两侧固定中间自适应" class="headerlink" title="1、利用定位实现两侧固定中间自适应"></a>1、利用定位实现两侧固定中间自适应</h4><ul><li><p>父盒子设置左右 padding 值</p></li><li><p>padding的值为左右两个盒子的宽度，使得左右两个盒子分别定位在父盒子的padding处</p></li><li><p>中间盒子自适应</p></li></ul><pre><code class="html">html结构：&lt;div class=&quot;father&quot;&gt; &lt;div class=&quot;left&quot;&gt;&lt;/div&gt; &lt;div class=&quot;center&quot;&gt;&lt;/div&gt; &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;&lt;/div&gt;css：&lt;style&gt; .father &#123; height: 400px; background-color: pink; position: relative; padding: 0 200px; &#125; .left,.right &#123; width: 200px; height: 300px; background-color: yellow; position: absolute; top: 0; &#125; .left &#123; left: 0; &#125; .right &#123; right: 0; &#125; .center &#123; background-color: blue; height: 350px; &#125;&lt;/style&gt;</code></pre><h4 id="2、利用-flex-布局实现两侧固定中间自适应"><a href="#2、利用-flex-布局实现两侧固定中间自适应" class="headerlink" title="2、利用 flex 布局实现两侧固定中间自适应"></a>2、利用 flex 布局实现两侧固定中间自适应</h4><ul><li>父盒子设置 display:flex;</li><li>左右盒子设置固定宽高</li><li>中间盒子设置 flex:1 ;</li></ul><h4 id="3、利用-bfc-块级格式化上下文-实现两侧固定中间自适应"><a href="#3、利用-bfc-块级格式化上下文-实现两侧固定中间自适应" class="headerlink" title="3、利用 bfc 块级格式化上下文, 实现两侧固定中间自适应"></a>3、利用 bfc 块级格式化上下文, 实现两侧固定中间自适应</h4><ul><li>左右盒子固定宽高，进行浮动</li><li>中间 overflow: hidden;</li><li>注意这里在html结构中中间的盒子要写在两边两个盒子的后面</li></ul><pre><code class="html">&lt;div class=&quot;father&quot;&gt; &lt;div class=&quot;left&quot;&gt;&lt;/div&gt; &lt;div class=&quot;right&quot;&gt;&lt;/div&gt; &lt;div class=&quot;center&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;!-- 注意:left 和 right 必须放在 center 前面 --&gt;&lt;style&gt; .father &#123; height: 500px; background-color: pink; &#125; .left &#123; float: left; width: 200px; height: 400px; background-color: blue; &#125; .right &#123; float: right; width: 200px; height: 400px; background-color: blue; &#125; .center &#123; height: 450px; background-color: green; overflow: hidden; &#125; &lt;/style&gt;     </code></pre><h2 id="二十二、CSS-中-link-和-import-的区别？"><a href="#二十二、CSS-中-link-和-import-的区别？" class="headerlink" title="二十二、CSS 中 link 和@import 的区别？"></a><a name='22'>二十二、CSS 中 link 和@import 的区别？</a></h2><ul><li>link是XHTML标签，除了加载CSS外，还可以定义RSS连接属性、引入网站标签等；@import属于CSS范畴，只能加载CSS。</li><li>link引用CSS时，在页面载入时同时加载；@import引入的CSS将在页面加载完毕后被加载。</li><li>link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。</li><li>link支持使用Javascript控制DOM去改变样式；而@import不支持。</li></ul><h2 id="二十三、分析比较-opacity-0、visibility-hidden、display-none-优劣和适用场景"><a href="#二十三、分析比较-opacity-0、visibility-hidden、display-none-优劣和适用场景" class="headerlink" title="二十三、分析比较 opacity: 0、visibility: hidden、display: none 优劣和适用场景"></a><a name='23'>二十三、分析比较 opacity: 0、visibility: hidden、display: none 优劣和适用场景</a></h2><ul><li>opacity&#x3D;0，元素隐藏起来了，但不会改变页面布局，并且，如果该元素已经绑定一些事件，如click 事件，那么点击该区域，也能触发点击事件的；</li><li>visibility&#x3D;hidden，元素隐藏起来了，但不会改变页面布局，不会触发该元素已经绑定的事件；</li><li>display&#x3D;none，元素隐藏起来l，并且会改变页面布局，可以理解成在页面中把该元素删除掉一样。</li></ul><h2 id="二十四、HTMLCollection-和NodeList的区别"><a href="#二十四、HTMLCollection-和NodeList的区别" class="headerlink" title="二十四、HTMLCollection 和NodeList的区别?"></a><a name='24'>二十四、HTMLCollection 和NodeList的区别?</a></h2><ul><li><p>node是最顶层的节点 ，包含了document、element、以及文本和注释节点</p></li><li><p>element是元素节点的集合，而HTMLCollection 继承于element</p></li><li><p>HTMLCollection是元素的集合</p></li><li><p>NodeList 是node的集合</p></li><li><p>上述这两个是伪数组</p></li></ul><p>例子：elem.childNodes获取的是子node节点，包括了文本、注释、元素</p><p>而      elem.children 获取的是所有子元素  也就是元素节点，如div span 这些</p><h2 id="二十五、localstorage、sessionstorage、cookie的区别"><a href="#二十五、localstorage、sessionstorage、cookie的区别" class="headerlink" title="二十五、localstorage、sessionstorage、cookie的区别"></a><a name='25'>二十五、<code>localstorage</code>、<code>sessionstorage</code>、<code>cookie</code>的区别</a></h2><h4 id="1、存储大小不同-1"><a href="#1、存储大小不同-1" class="headerlink" title="1、存储大小不同"></a>1、存储大小不同</h4><ul><li><code>localstorage</code>和<code>sessionstorage</code>的最大存储空间为5M，cookie的最大存储空间为4k</li></ul><h4 id="2、生命周期不同-1"><a href="#2、生命周期不同-1" class="headerlink" title="2、生命周期不同"></a>2、生命周期不同</h4><ul><li><code>localstorage</code>存储的数据是永久性的，除非人为删除</li><li><code>cookie</code>存储的数据在有效时间之前一直有效，时间过了就无效了</li><li><code>sessionstorage</code>存储的数据在关闭页面会话（关闭标签页）之后就会被清除</li></ul><h4 id="3、数据共享不同-1"><a href="#3、数据共享不同-1" class="headerlink" title="3、数据共享不同"></a>3、数据共享不同</h4><ul><li><code>localstorage</code> 和<code>cookie</code>在所有同源窗口共享</li><li><code>sessionstorage </code>只能在当前会话标签共享</li></ul>]]></content>
    
    
    <summary type="html">采用简约大方的扁平化Hexo-Quiet主题</summary>
    
    
    
    <category term="前端学习" scheme="https://szgyfe.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="前端面试" scheme="https://szgyfe.github.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
    
    <category term="前端学习" scheme="https://szgyfe.github.io/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="前端笔记" scheme="https://szgyfe.github.io/tags/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
